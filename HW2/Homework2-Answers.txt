Conceptual Questions:
1. Difference between WHERE and HAVING?

Both are used as filters but having applies to groups and filters on aggregate funcitons, but WHERE applies to individual rows.
WHERE cannot filter by aggregate functions but HAVING can
WHERE can be used with SELECT, UPDATE, DELETE, but HAVING can only used with SELECT

2. Difference between RANK() and DenseRank()
RANK will skip numbers after having the same rank number, while DENSE RANK does not
E.g.
RANK      : 1 2 2 2 5 6 6 8
Dense RANK: 1 2 2 2 3 4 4 5

3. What is correlated subquery?
A correlated subquery is a subquery that uses the values from outer query. 
correlated subquery can be very inefficient because it may be evaluated for each row of outer query

4. Criteria of Union and Union all?
Both UNION and UNION ALL concatenates the results of two queries into a single result set vertically.
To use them, two results need to have the same number of columns
and the same data type associated with the column number.
UNION uses the first select statement alias in the final result

5. Difference between UNION and UNION ALL
UNION removes duplicates, UNION ALL will not
When using UNION,  the records from the first column is sorted automatically
Becasue of the difference above, UNION  ALL is usually faster than UNION
UNION cannot be used in recrusive CTE, but UNION ALL can

6. Difference between Union and JOIN
UNION concatenates the results vertically, while JOIN concatenates the results horizontoally

Coding Questions:
1.
SELECT DISTINCT c.Name [Country], s.Name [Province]
FROM Person.CountryRegion as c INNER JOIN Person.StateProvince as s
ON c.CountryRegionCode = s.CountryRegionCode

2. 
SELECT DISTINCT c.Name [Country], s.Name [Province]
FROM Person.CountryRegion as c INNER JOIN Person.StateProvince as s
ON c.CountryRegionCode = s.CountryRegionCode
WHERE c.Name NOT IN  ('Germany', 'Canada')

3.
WITH OrderI(OrderID, ProductID, OrderDate)
AS(
    SELECT o.OrderID, d.ProductID, o.OrderDate
    FROM Orders as o INNER JOIN [Order Details] as d
    ON o.OrderID = d.OrderID
    WHERE YEAR(o.OrderDate) > 1997
)
SELECT DISTINCT p.ProductID, p.ProductName
FROM Products p INNER JOIN OrderI as i 
ON p.ProductID = i.ProductID 
ORDER BY p.ProductName

4.
select TOP 5 ShipPostalCode
from Orders as o JOIN [Order Details] as od
ON o.OrderID = od.OrderID
WHERE YEAR(OrderDate) > 1997
GROUP BY ShipPostalCode
ORDER BY SUM(Quantity) DESC

5.
select City, COUNT(CustomerID) as CustomerCount
from Customers
GROUP BY City

6.
select City, COUNT(CustomerID) as CustomerCount
from Customers
GROUP BY City
HAVING COUNT(CustomerID) >=2

7.
WITH CustomerCount
AS(
    SELECT o.CustomerID, SUM(d.Quantity) as ProductCount
    FROM Orders as o INNER JOIN [Order Details] as d
    ON o.OrderID = d.OrderID
    GROUP BY o.CustomerID
)
SELECT c.CustomerID, c.ContactName [Name], cc.ProductCount
FROM Customers as c LEFT JOIN CustomerCount as cc
ON c.CustomerID = cc.CustomerID

8.
SELECT o.CustomerID, SUM(d.Quantity) as ProductCount
FROM Orders as o INNER JOIN [Order Details] as d
ON o.OrderID = d.OrderID
GROUP BY o.CustomerID
HAVING SUM(d.Quantity) > 100

9.
WITH SupplierData
AS(
    SELECT p.ProductID, p.SupplierID, s.CompanyName [SupplyName]
    FROM Products as p JOIN Suppliers as s
    ON p.SupplierID = s.SupplierID 
), OrderSupplier
AS(
    SELECT od.OrderID, od.ProductID, sd.SupplierID, sd.SupplyName
    FROM [Order Details] as od JOIN SupplierData as sd
    ON od.ProductID = sd.ProductID
), MOrderDetail
AS(
    SELECT os.*, o.ShipVia
    FROM Orders as o JOIN OrderSupplier as os
    ON o.OrderID = os.OrderID
), OSS
AS(
    SELECT mo.*, s.CompanyName [ShipperName]
    FROM Shippers as s JOIN MOrderDetail as mo
    ON s.ShipperID = mo.ShipVia
)
select DISTINCT SupplyName  [Supplier Company Name] , ShipperName  [Shipping Company Name] from OSS

10.
WITH OrderI(OrderID, ProductID, OrderDate)
AS(
    SELECT o.OrderID, d.ProductID, o.OrderDate
    FROM Orders as o INNER JOIN [Order Details] as d
    ON o.OrderID = d.OrderID
)
SELECT i.OrderDate, p.ProductName
FROM Products p INNER JOIN OrderI as i 
ON p.ProductID = i.ProductID 
ORDER BY i.OrderDate

11.
SELECT dt.[Employee 1], dt.[Employee 2]
FROM(
SELECT e1.FirstName + ' ' + e1.LastName [Employee 1], e2.FirstName + ' ' + e2.LastName [Employee 2] 
FROM Employees as e1 INNER JOIN Employees as e2
ON e1.Title = e2.Title) as dt
WHERE dt.[Employee 1]> dt.[Employee 2]

12.
SELECT e.FirstName + ' ' + e.LastName as Manager
FROM Employees as e INNER JOIN (
SELECT e2.EmployeeID, COUNT(e1.EmployeeID) [ReportCount]
FROM Employees as e1 INNER JOIN Employees as e2
ON (e1.FirstName != e2.FirstName or e1.LastName != e2.LastName) AND e1.ReportsTo = e2.EmployeeID
GROUP BY e2.EmployeeID
HAVING COUNT(e1.EmployeeID) >2
) as inf
ON e.EmployeeID = inf.EmployeeID

13.
SELECT City, CompanyName [Name], ContactName[ContactName], 'Customer' [Type]
FROM Customers
UNION
SELECT City, CompanyName [Name], ContactName[ContactName], 'Suppliers' [Type]
FROM Suppliers
ORDER BY City

14.
SELECT cc.City
FROM (
    SELECT City, COUNT(CustomerID) as [CustomerCount]
    FROM Customers
    GROUP BY City
) as cc INNER JOIN (
    SELECT City, COUNT(EmployeeID) as [EmployeeCount]
    FROM Employees
    GROUP BY City
) as ec
ON cc.City = ec.City
WHERE cc.CustomerCount >0 and ec.EmployeeCount >0

15.
a.
SELECT DISTINCT  City
    FROM Customers
WHERE City NOT IN
(
    SELECT DISTINCT City
    FROM Employees
) 

b.
SELECT DISTINCT City
FROM Customers as c
EXCEPT
SELECT DISTINCT City
FROM Employees

16.
SELECT p.ProductName, p.ProductID, SUM(od.Quantity)[Total Order Quantity]
FROM Products as p LEFT JOIN [Order Details] as od
ON p.ProductID = od.ProductID 
GROUP BY p.ProductName, p.ProductID
ORDER BY p.ProductID 

17.
a.
SELECT City
FROM Customers
GROUP BY City
EXCEPT
(
SELECT City
FROM Customers
GROUP BY City
HAVING COUNT(CustomerID) = 0
UNION
SELECT City
FROM Customers
GROUP BY City
HAVING COUNT(CustomerID) = 1
)

b.
SELECT DISTINCT City
FROM Customers where City in (
    SELECT City
    FROM Customers
    GROUP BY City
    HAVING COUNT(CustomerID) >=2
)

18.
SELECT o.ShipCity
FROM Orders o INNER JOIN [Order Details] od
ON o.OrderID = od.OrderID
GROUP BY o.ShipCity
HAVING COUNT(DISTINCT od.ProductID) >= 2

19.
WITH RankDetail AS(
    SELECT  s.ProductID, dt.ShipCity as[Top City]
    FROM (
        SELECT TOP 5 ProductID, SUM(Quantity) as QSUM
        FROM [Order Details]
        GROUP BY ProductID
        ORDER BY QSUM desc
    )as s INNER JOIN(
        SELECT o.ShipCity, od.ProductID, SUM(od.Quantity) [Quantity of Products], RANK() Over(Partition by od.ProductID Order BY SUM(od.Quantity) desc) [PRank]
        FROM Orders as o LEFT JOIN [Order Details] as od
        ON o.OrderID = od.OrderID
        GROUP BY o.ShipCity, od.ProductID
    ) as dt
    ON s.ProductID = dt.ProductID
    WHERE PRank =1
)
SELECT p.ProductID, p.ProductName, UnitPrice  [AVERAGE UNIT PRICE], rd.[Top City]
FROM Products as p INNER JOIN RankDetail as rd
ON p.ProductID = rd.ProductID

20.
SELECT * 
FROM (
    SELECT TOP 1 ShipCity, COUNT(OrderID) [Order Count]
    FROM Orders
    GROUP BY ShipCity
    Order By [Order Count] DESC
) AS oc INNER JOIN(
    SELECT TOP 1 o.ShipCity, SUM(od.Quantity) [Quantity of Products]
    FROM Orders as o LEFT JOIN [Order Details] as od
    ON o.OrderID = od.OrderID
    GROUP BY o.ShipCity
    ORDER BY [Quantity of Products] DESC
) AS qc
ON oc.ShipCity = qc.ShipCity



21. Union By it self or use SELECT DISTINCT
E.g.
SELECT OrderID
FROM [Order Details]
UNION
SELECT OrderID
FROM [Order Details]

SELECT DISTINCT OrderID
FROM [Order Details]

